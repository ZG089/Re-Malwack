#!/system/bin/sh

# Define functions
function malvack_banner() {
    clear
    echo -e "\033[0;31m                                      .--.                            "
    echo -e "\033[0;31m                                   .=*#=                              "
    echo -e "\033[0;31m                                 .+###+                               "
    echo -e "\033[0;31m                                .*#####-                              "
    echo -e "\033[0;31m                               .*##***-**=:                           "
    echo -e "\033[0;31m                             .*###-    .=*##+-.                       "
    echo -e "\033[0;31m                             .-+**        .-=*##+=:                   "
    echo -e "\033[0;31m                   .:.           ::           -*####+-.               "
    echo -e "\033[0;31m                   -*#*+:     -*##+.            .-+####+-.           "
    echo -e "\033[0;31m                     .:*#+***+#*:                  .-+###*           "
    echo -e "\033[0;31m                      :*#######*.                     .:-.           "
    echo -e "\033[0;31m                      +*********-                                     "
    echo -e "\033[0;31m              +#+.   .:::::  ::::    :*#:                             "
    echo -e "\033[0;31m               :+#+==#####* .####*==*#+:                              "
    echo -e "\033[0;31m                 .---##*-: :+####+---.                                "
    echo -e "\033[0;31m                     ##=  :#*+*##=                                    "
    echo -e "\033[0;31m                 .=++###**#+   *#*++-                                 "
    echo -e "\033[0;31m                =##=--####- .-=#*--+#*-                               "
    echo -e "\033[0;31m               =*=.   .+#+ -##*=.   .+*:                              "
    echo -e "\033[0;31m                        .. :-:                                        "
    echo -e "\033[0;37m        ╔────────────────────────────────────────╗"
    echo -e "\033[0;37m        │░█▀▄░█▀▀░░░░░█▄█░█▀█░█░░░█░█░█▀█░█▀▀░█░█│"
    echo -e "\033[0;37m        │░█▀▄░█▀▀░▄▄▄░█░█░█▀█░█░░░█▄█░█▀█░█░░░█▀▄│"
    echo -e "\033[0;37m        │░▀░▀░▀▀▀░░░░░▀░▀░▀░▀░▀▀▀░▀░▀░▀░▀░▀▀▀░▀░▀│"
    echo -e "\033[0;37m        ╚────────────────────────────────────────╝\033[0m"
}

function install_hosts() {
    cp -f "$hosts_file" "${tmp_hosts}0"
    awk '!/^(\s*#|\s*$)/ && !seen[$0]++' "${tmp_hosts}"* > "$hosts_file"
    [ -n "$block_type" ] && sed -i "s/^block_${block_type}=.*/block_${block_type}=1/" /data/adb/Re-Malwack/config.sh
    rm -f "${tmp_hosts}"* 2>/dev/null
}

function remove_hosts() {
    cat "${cache_hosts}"* | awk '!/^(\s*#|\s*$)/ {print $0}' | sort -u > "${tmp_hosts}"
    cp -f "$hosts_file" "${tmp_hosts}0".

    # Ensure necessary files exist
    if [[ ! -f "$tmp_hosts" || ! -f "${tmp_hosts}0" ]]; then
        echo "- Error: Temporary hosts files missing."
        return 1
    fi

    # Remove duplicates from the hosts file
    awk 'NR==FNR {seen[$0]=1; next} !seen[$0]' "$tmp_hosts" "${tmp_hosts}0" > "${tmp_hosts}_cleaned"

    # Overwrite the main hosts file with cleaned data
    cp -f "${tmp_hosts}_cleaned" "$hosts_file"
    chmod 644 "$hosts_file"

    # Ensure the hosts file is valid (not empty)
    if [[ ! -s "$hosts_file" ]]; then
        echo "- Warning: Hosts file is empty. Restoring default entries."
        echo -e "127.0.0.1 localhost\n::1 localhost" > "$hosts_file"
    fi

    # Clean up temporary files
    sed -i "s/^block_${block_type}=.*/block_${block_type}=0/" /data/adb/Re-Malwack/config.sh
    rm -f "${tmp_hosts}"* 2>/dev/null
    rm -rf "$persist_dir/cache/$block_type" 2>/dev/null
    echo "- Hosts file cleaned and updated successfully."
    return 0
}

function block_content() {
    local block_type=$1
    local status=$2
    if [ "$status" = 0 ] && [ -d "$persist_dir/cache/$block_type" ]; then
        remove_hosts
    else
        fetch "${tmp_hosts}1" https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/${block_type}-only/hosts &>/dev/null
        if [ "$block_type" = "porn" ]; then
            fetch "${tmp_hosts}2" https://raw.githubusercontent.com/johnlouie09/Anti-Porn-HOSTS-File/refs/heads/master/HOSTS.txt &>/dev/null
            fetch "${tmp_hosts}3" https://www.someonewhocares.org/hosts/hosts &>/dev/null
        fi
        mkdir -p "$persist_dir/cache/$block_type"
        cp -f "${tmp_hosts}"* "$persist_dir/cache/$block_type"
        [ "$status" = 0 ] && remove_hosts || install_hosts
    fi
}

function tolower() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

function abort() {
    echo "- $1"
    sleep 0.5
    exit 1
}

function nuke_if_we_dont_have_internet() {
    ping -w 1 google.com >/dev/null 2>&1
    return $?
}

function ask() {
    local question="$1"
    local answer
    printf "- $question (y/n): "
    read -r answer
    if [[ "$(tolower "$answer")" == "y" ]]; then
        return 0
    else
        return 1
    fi
}

# Fallback to busybox wget if curl binary is not available
function fetch() {
    PATH=/data/adb/ap/bin:/data/adb/ksu/bin:/data/adb/magisk:/data/data/com.termux/files/usr/bin:$PATH
    if command -v curl >/dev/null 2>&1; then
        curl -o "$@" || abort "Failed to download hosts file."
    else
        busybox wget --no-check-certificate -O - "$@" || abort "Failed to download hosts file."
    fi
}

function update_status() {
    if grep -q '0.0.0.0' "$hosts_file"; then
        string="description=Status: Protection is enabled ✅ | Last updated: $(date)"
        sed -i "s/^description=.*/$string/g" $MODDIR/module.prop
    else
        string="description=Status: Protection is disabled due to reset ❌"
        sed -i "s/^description=.*/$string/g" $MODDIR/module.prop
    fi
}

# Variables
persist_dir="/data/adb/Re-Malwack"
domain="$2"
temp=$(mktemp)
MODDIR="/data/adb/modules/Re-Malwack"
hosts_file="$MODDIR/system/etc/hosts"
tmp_hosts="/data/local/tmp/hosts"
# tmp_hosts 0 = original hosts file, to prevent overwrite before cat process complete, ensure coexisting of different block type.
# tmp_hosts 1-9 = downloaded hosts, to simplify process of install and remove function.

# Read config
. "$persist_dir/config.sh"

# Banner
malvack_banner

# Check Root
if [ "$(id -u)" -ne 0 ]; then
    abort "Root is required to run this script."
fi

# Main Logic
case "$(tolower "$1")" in
    --reset)
        echo "- Reverting the changes..."
        echo "127.0.0.1 localhost\n::1 localhost" > "$hosts_file"
        chmod 644 "$hosts_file"
        update_status
        echo "- Successfully reverted changes."
        ;;
    --block-porn|--block-gambling|--block-fakenews)
        block_type=${1#--block-}
        status=$2
        cache_hosts="$persist_dir/cache/$block_type/hosts"
        if [ "$status" = "disable" ] || [ "$status" = 0 ]; then
            echo "- Unblocking ${block_type} sites."
            block_content "$block_type" 0
            echo "- Unblocked ${block_type} sites successfully."
        else
            echo "- Downloading entries for ${block_type}."
            block_content "$block_type"
            echo "- Blocked ${block_type} sites successfully."
        fi
        update_status
        ;;
    --whitelist)
        [[ -z "$domain" ]] && abort "Please provide a domain to whitelist."
        # Check if the domain exists in the hosts file
        if grep -q "0\.0\.0\.0 $domain" "$hosts_file"; then
            # Remove the line containing the domain
            if sed -i "/0\.0\.0\.0 $domain/d" "$hosts_file"; then
                echo "- Whitelisted $domain."
            else
                abort "Error: Failed to whitelist $domain. Please check the hosts file and permissions."
            fi
        else
            echo "- Domain $domain is not in the hosts file, nothing to whitelist."
            exit 1
        fi
        ;;
    --blacklist)
        [[ -z "$domain" ]] && abort "Please provide a domain to blacklist."
        # Check if the domain is already blocked
        if grep -q "0\.0\.0\.0 $domain" "$hosts_file"; then
            echo "- Domain $domain is already blocked."
            exit 1
        else
            echo "0.0.0.0 $domain" >> "$hosts_file" && echo "- Blacklisted $domain."
            # [[ $? -ne 0 ]] && abort "Error: Failed to blacklist $domain. Please check the hosts file and permissions."
            update_status
        fi
        ;;
    --update-hosts)
        echo "- Downloading updates, Please wait."
        fetch "${tmp_hosts}1" https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts &>/dev/null
        fetch "${tmp_hosts}2" https://raw.githubusercontent.com/hagezi/dns-blocklists/main/hosts/pro.plus-compressed.txt &>/dev/null 
        fetch "${tmp_hosts}3" https://o0.pages.dev/Pro/hosts.txt &>/dev/null
        fetch "${tmp_hosts}4" https://raw.githubusercontent.com/r-a-y/mobile-hosts/master/AdguardDNS.txt &>/dev/null
        fetch "${tmp_hosts}5" https://raw.githubusercontent.com/r-a-y/mobile-hosts/refs/heads/master/AdguardMobileAds.txt &>/dev/null
        fetch "${tmp_hosts}6" https://raw.githubusercontent.com/r-a-y/mobile-hosts/refs/heads/master/AdguardMobileSpyware.txt &>/dev/null
        echo "- Applying update."
        install_hosts
        [ "$block_porn" = 1 ] && block_content "porn"
        [ "$block_gambling" = 1 ] && block_content "gambling"
        [ "$block_fakenews" = 1 ] && block_content "fakenews"
        update_status
        echo "- Done."
        ;;
    --help|-h|*)
        echo ""
        echo "Usage: su -c rmlwk [--argument]"
        echo "--reset: Restore original hosts file."
        echo "--block-porn <disable>: Block pornographic sites, use disable to unblock."
        echo "--block-gambling <disable>: Block gambling sites, use disable to unblock."
        echo "--block-fakenews <disable>: Block fake news sites, use disable to unblock."
        echo "--whitelist <domain>: Whitelist a domain."
        echo "--blacklist <domain>: Blacklist a domain."
        echo "--update-hosts: Update the hosts file."
        echo "--help, -h: Display help."
        echo -e "\033[0;31m Example command: su -c rmlwk --update-hosts"
        ;;
esac
